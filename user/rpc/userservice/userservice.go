// Code generated by goctl. DO NOT EDIT.
// Source: user_rpc.proto

package userservice

import (
	"context"

	"server/user/rpc/proto"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FriendListRequest             = proto.FriendListRequest
	GroupMemberOnlineListRequest  = proto.GroupMemberOnlineListRequest
	GroupMemberOnlineListResponse = proto.GroupMemberOnlineListResponse
	IsFriendRequest               = proto.IsFriendRequest
	IsFriendResponse              = proto.IsFriendResponse
	UserBaseInfoResponse          = proto.UserBaseInfoResponse
	UserCreateRequest             = proto.UserCreateRequest
	UserInfo                      = proto.UserInfo
	UserInfoRequest               = proto.UserInfoRequest
	UserInfoResponse              = proto.UserInfoResponse
	UserListInfoRequest           = proto.UserListInfoRequest
	UserListInfoResponse          = proto.UserListInfoResponse
	UserOnlineListRequest         = proto.UserOnlineListRequest
	UserOnlineListResponse        = proto.UserOnlineListResponse

	UserService interface {
		CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
		UserListInfo(ctx context.Context, in *UserListInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error)
		FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error)
		IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error)
		UserOnlineList(ctx context.Context, in *UserOnlineListRequest, opts ...grpc.CallOption) (*UserOnlineListResponse, error)
		GroupMemberOnlineList(ctx context.Context, in *GroupMemberOnlineListRequest, opts ...grpc.CallOption) (*GroupMemberOnlineListResponse, error)
		UserBaseInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBaseInfoResponse, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) CreateUser(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUserService) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserService) UserListInfo(ctx context.Context, in *UserListInfoRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.UserListInfo(ctx, in, opts...)
}

func (m *defaultUserService) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*UserListInfoResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.FriendList(ctx, in, opts...)
}

func (m *defaultUserService) IsFriend(ctx context.Context, in *IsFriendRequest, opts ...grpc.CallOption) (*IsFriendResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.IsFriend(ctx, in, opts...)
}

func (m *defaultUserService) UserOnlineList(ctx context.Context, in *UserOnlineListRequest, opts ...grpc.CallOption) (*UserOnlineListResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.UserOnlineList(ctx, in, opts...)
}

func (m *defaultUserService) GroupMemberOnlineList(ctx context.Context, in *GroupMemberOnlineListRequest, opts ...grpc.CallOption) (*GroupMemberOnlineListResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.GroupMemberOnlineList(ctx, in, opts...)
}

func (m *defaultUserService) UserBaseInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserBaseInfoResponse, error) {
	client := proto.NewUserServiceClient(m.cli.Conn())
	return client.UserBaseInfo(ctx, in, opts...)
}
