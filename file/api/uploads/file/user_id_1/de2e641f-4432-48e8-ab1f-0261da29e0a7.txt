public class LongestValidParentheses {

    public static int findLongestValidParentheses(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }

        int maxLength = 0;
        int[] dp = new int[s.length()];

        for (int i = 1; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == ')') {
                if (s.charAt(i - 1) == '(') {
                    // 当前位置前面是'('，则当前位置的有效括号长度为当前位置前面的有效括号长度加2
                    dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                } else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {
                    // 当前位置前面也是')'，则向前追溯到对应位置前面的'('，累加当前位置前面的有效括号长度
                    dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                }
                maxLength = Math.max(maxLength, dp[i]);
            }
        }

        return maxLength;
    }

    public static void main(String[] args) {
        String input = "(()))())(()))))";
        int longestLength = findLongestValidParentheses(input);
        System.out.println("The length of the longest valid parentheses substring is: " + longestLength);
    }
}